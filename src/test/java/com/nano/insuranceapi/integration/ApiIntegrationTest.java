package com.nano.insuranceapi.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.nano.insuranceapi.dto.PolicyRequest;
import com.nano.insuranceapi.dto.PremiumQuoteRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.containers.OracleContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.time.LocalDate;

import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@Testcontainers
public class ApiIntegrationTest {

    @Container
    static OracleContainer oracleContainer = new OracleContainer("gvenzl/oracle-xe")
            .withPassword("MyStrongPassword123");

    @DynamicPropertySource
    static void registerOracleProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", () -> 
                oracleContainer.getJdbcUrl().replace("localhost", "localhost"));
        registry.add("spring.datasource.username", () -> "system");
        registry.add("spring.datasource.password", () -> "MyStrongPassword123");
    }

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @BeforeEach
    void setUp() {
        // Initialize the database schema and test data
        System.out.println("[DEBUG_LOG] Setting up test database for API integration tests");

        // Create insurance_admin user if it doesn't exist
        try {
            jdbcTemplate.execute("CREATE USER insurance_admin IDENTIFIED BY StrongPassword123");
            jdbcTemplate.execute("GRANT CONNECT, RESOURCE TO insurance_admin");
            jdbcTemplate.execute("ALTER USER insurance_admin DEFAULT TABLESPACE users QUOTA UNLIMITED ON users");
        } catch (Exception e) {
            System.out.println("[DEBUG_LOG] User insurance_admin might already exist: " + e.getMessage());
            // Continue with the test
        }

        // Switch to insurance_admin schema
        jdbcTemplate.execute("ALTER SESSION SET CURRENT_SCHEMA = insurance_admin");

        // Drop existing tables and sequences if they exist
        try {
            jdbcTemplate.execute("DROP TABLE POLICIES");
        } catch (Exception e) {
            System.out.println("[DEBUG_LOG] Table POLICIES might not exist: " + e.getMessage());
        }

        try {
            jdbcTemplate.execute("DROP TABLE CUSTOMERS");
        } catch (Exception e) {
            System.out.println("[DEBUG_LOG] Table CUSTOMERS might not exist: " + e.getMessage());
        }

        try {
            jdbcTemplate.execute("DROP TABLE INSURANCE_PRODUCTS");
        } catch (Exception e) {
            System.out.println("[DEBUG_LOG] Table INSURANCE_PRODUCTS might not exist: " + e.getMessage());
        }

        try {
            jdbcTemplate.execute("DROP SEQUENCE policy_seq");
        } catch (Exception e) {
            System.out.println("[DEBUG_LOG] Sequence policy_seq might not exist: " + e.getMessage());
        }

        // Create tables
        jdbcTemplate.execute("CREATE TABLE INSURANCE_PRODUCTS (" +
                "product_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, " +
                "product_name VARCHAR2(100) NOT NULL, " +
                "base_premium NUMBER(10,2) NOT NULL, " +
                "risk_factor_logic VARCHAR2(50) NOT NULL, " +
                "CONSTRAINT chk_risk_logic CHECK (risk_factor_logic IN ('AGE_BASED', 'FLAT_RATE'))" +
                ")");

        jdbcTemplate.execute("CREATE TABLE CUSTOMERS (" +
                "customer_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, " +
                "email VARCHAR2(100) NOT NULL, " +
                "customer_name VARCHAR2(100) NOT NULL, " +
                "date_of_birth DATE NOT NULL, " +
                "CONSTRAINT uq_customers_email UNIQUE (email)" +
                ")");

        jdbcTemplate.execute("CREATE TABLE POLICIES (" +
                "policy_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, " +
                "policy_number VARCHAR2(30) NOT NULL UNIQUE, " +
                "product_id NUMBER NOT NULL, " +
                "customer_id NUMBER NOT NULL, " +
                "coverage_amount NUMBER(15,2) NOT NULL, " +
                "annual_premium NUMBER(15,2) NOT NULL, " +
                "start_date DATE NOT NULL, " +
                "end_date DATE NOT NULL, " +
                "creation_date DATE DEFAULT SYSDATE NOT NULL, " +
                "CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES INSURANCE_PRODUCTS(product_id), " +
                "CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id)" +
                ")");

        jdbcTemplate.execute("CREATE SEQUENCE policy_seq START WITH 1000 INCREMENT BY 1 NOCACHE");

        // Insert test data
        jdbcTemplate.execute("INSERT INTO INSURANCE_PRODUCTS (product_name, base_premium, risk_factor_logic) " +
                "VALUES ('Basic Health Plan', 500.00, 'AGE_BASED')");

        jdbcTemplate.execute("INSERT INTO INSURANCE_PRODUCTS (product_name, base_premium, risk_factor_logic) " +
                "VALUES ('Travel Lite Plan', 300.00, 'FLAT_RATE')");

        // Create PL/SQL package
        jdbcTemplate.execute(
                "CREATE OR REPLACE PACKAGE insurance_engine AS " +
                "  FUNCTION calculate_premium ( " +
                "    p_product_id      IN NUMBER, " +
                "    p_date_of_birth   IN DATE, " +
                "    p_coverage_amount IN NUMBER " +
                "  ) RETURN NUMBER; " +
                "  PROCEDURE create_policy ( " +
                "    p_product_id       IN NUMBER, " +
                "    p_customer_name    IN VARCHAR2, " +
                "    p_customer_dob     IN DATE, " +
                "    p_customer_email   IN VARCHAR2, " +
                "    p_coverage_amount  IN NUMBER, " +
                "    p_policy_number    OUT VARCHAR2 " +
                "  ); " +
                "END insurance_engine;"
        );

        jdbcTemplate.execute(
                "CREATE OR REPLACE PACKAGE BODY insurance_engine AS " +
                "  e_invalid_product EXCEPTION; " +
                "  PRAGMA EXCEPTION_INIT(e_invalid_product, -20001); " +
                "  FUNCTION calculate_premium ( " +
                "    p_product_id      IN NUMBER, " +
                "    p_date_of_birth   IN DATE, " +
                "    p_coverage_amount IN NUMBER " +
                "  ) RETURN NUMBER IS " +
                "    v_base_premium     NUMBER; " +
                "    v_risk_logic       VARCHAR2(50); " +
                "    v_age              NUMBER; " +
                "    v_age_multiplier   NUMBER := 1.0; " +
                "    v_coverage_mult    NUMBER; " +
                "    v_premium          NUMBER; " +
                "  BEGIN " +
                "    SELECT base_premium, risk_factor_logic " +
                "    INTO v_base_premium, v_risk_logic " +
                "    FROM insurance_products " +
                "    WHERE product_id = p_product_id; " +
                "    IF v_risk_logic = 'FLAT_RATE' THEN " +
                "      RETURN v_base_premium; " +
                "    END IF; " +
                "    v_age := FLOOR(MONTHS_BETWEEN(SYSDATE, p_date_of_birth) / 12); " +
                "    IF v_age BETWEEN 18 AND 25 THEN " +
                "      v_age_multiplier := 1.5; " +
                "    ELSIF v_age BETWEEN 26 AND 40 THEN " +
                "      v_age_multiplier := 1.0; " +
                "    ELSIF v_age BETWEEN 41 AND 65 THEN " +
                "      v_age_multiplier := 1.2; " +
                "    ELSE " +
                "      v_age_multiplier := 1.0; " +
                "    END IF; " +
                "    v_coverage_mult := p_coverage_amount / 100000; " +
                "    v_premium := v_base_premium * v_age_multiplier * v_coverage_mult; " +
                "    RETURN v_premium; " +
                "  EXCEPTION " +
                "    WHEN NO_DATA_FOUND THEN " +
                "      RAISE_APPLICATION_ERROR(-20001, 'Invalid product ID.'); " +
                "  END calculate_premium; " +
                "  PROCEDURE create_policy ( " +
                "    p_product_id       IN NUMBER, " +
                "    p_customer_name    IN VARCHAR2, " +
                "    p_customer_dob     IN DATE, " +
                "    p_customer_email   IN VARCHAR2, " +
                "    p_coverage_amount  IN NUMBER, " +
                "    p_policy_number    OUT VARCHAR2 " +
                "  ) IS " +
                "    v_customer_id      NUMBER; " +
                "    v_annual_premium   NUMBER; " +
                "    v_next_seq         NUMBER; " +
                "  BEGIN " +
                "    BEGIN " +
                "      SELECT customer_id " +
                "      INTO v_customer_id " +
                "      FROM customers " +
                "      WHERE email = p_customer_email; " +
                "    EXCEPTION " +
                "      WHEN NO_DATA_FOUND THEN " +
                "        INSERT INTO customers (customer_name, date_of_birth, email) " +
                "        VALUES (p_customer_name, p_customer_dob, p_customer_email) " +
                "        RETURNING customer_id INTO v_customer_id; " +
                "    END; " +
                "    v_annual_premium := calculate_premium( " +
                "      p_product_id, " +
                "      p_customer_dob, " +
                "      p_coverage_amount " +
                "    ); " +
                "    SELECT policy_seq.NEXTVAL INTO v_next_seq FROM dual; " +
                "    p_policy_number := 'POL-' || TO_CHAR(SYSDATE, 'YYYY') || '-' || TO_CHAR(v_next_seq); " +
                "    INSERT INTO policies ( " +
                "      policy_number, " +
                "      product_id, " +
                "      customer_id, " +
                "      coverage_amount, " +
                "      annual_premium, " +
                "      start_date, " +
                "      end_date, " +
                "      creation_date " +
                "    ) VALUES ( " +
                "      p_policy_number, " +
                "      p_product_id, " +
                "      v_customer_id, " +
                "      p_coverage_amount, " +
                "      v_annual_premium, " +
                "      SYSDATE, " +
                "      SYSDATE + 365, " +
                "      SYSDATE " +
                "    ); " +
                "  END create_policy; " +
                "END insurance_engine;"
        );
    }

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void getProducts_shouldReturnListOfProducts() throws Exception {
        // Act & Assert
        mockMvc.perform(get("/api/products"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(greaterThanOrEqualTo(2))))
                .andExpect(jsonPath("$[0].productId", notNullValue()))
                .andExpect(jsonPath("$[0].productName", notNullValue()))
                .andExpect(jsonPath("$[0].basePremium", notNullValue()))
                .andExpect(jsonPath("$[0].riskFactorLogic", notNullValue()));
    }

    @Test
    void getQuote_withValidRequest_shouldReturnQuote() throws Exception {
        // Arrange
        PremiumQuoteRequest request = new PremiumQuoteRequest(
                1L, 
                LocalDate.now().minusYears(30), 
                200000.0
        );

        // Act & Assert
        mockMvc.perform(post("/api/quotes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.calculatedPremium", notNullValue()));
    }

    @Test
    void getQuote_withInvalidProduct_shouldReturnNotFound() throws Exception {
        // Arrange
        PremiumQuoteRequest request = new PremiumQuoteRequest(
                999L, 
                LocalDate.now().minusYears(30), 
                200000.0
        );

        // Act & Assert
        mockMvc.perform(post("/api/quotes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isNotFound())
                .andExpect(content().string(containsString("Product not found")));
    }

    @Test
    void getQuote_withInvalidRequest_shouldReturnBadRequest() throws Exception {
        // Arrange - Missing required fields
        String invalidRequest = "{\"productId\": null, \"customerDateOfBirth\": \"1990-01-01\", \"coverageAmount\": 200000.0}";

        // Act & Assert
        mockMvc.perform(post("/api/quotes")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidRequest))
                .andExpect(status().isBadRequest());
    }

    @Test
    void createPolicy_withValidRequest_shouldReturnCreatedPolicy() throws Exception {
        // Arrange
        PolicyRequest request = new PolicyRequest(
                1L,
                "Integration Test Customer",
                LocalDate.now().minusYears(35),
                "integration-test@example.com",
                250000.0
        );

        // Act & Assert
        mockMvc.perform(post("/api/policies")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.policyNumber", notNullValue()))
                .andExpect(jsonPath("$.policyNumber", startsWith("POL-")))
                .andExpect(jsonPath("$.productId", is(1)))
                .andExpect(jsonPath("$.customerName", is("Integration Test Customer")))
                .andExpect(jsonPath("$.customerEmail", is("integration-test@example.com")))
                .andExpect(jsonPath("$.coverageAmount", is(250000.0)))
                .andExpect(jsonPath("$.creationDate", notNullValue()));
    }

    @Test
    void createPolicy_withInvalidProduct_shouldReturnNotFound() throws Exception {
        // Arrange
        PolicyRequest request = new PolicyRequest(
                999L,
                "Integration Test Customer",
                LocalDate.now().minusYears(35),
                "integration-test-invalid@example.com",
                250000.0
        );

        // Act & Assert
        mockMvc.perform(post("/api/policies")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isNotFound())
                .andExpect(content().string(containsString("Product not found")));
    }

    @Test
    void createPolicy_withInvalidRequest_shouldReturnBadRequest() throws Exception {
        // Arrange - Empty customer name
        String invalidRequest = "{\"productId\": 1, \"customerName\": \"\", \"customerDateOfBirth\": \"1985-05-20\", \"customerEmail\": \"test@example.com\", \"coverageAmount\": 100000.0}";

        // Act & Assert
        mockMvc.perform(post("/api/policies")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidRequest))
                .andExpect(status().isBadRequest());
    }
}
