-- Exit on SQL error
WHENEVER SQLERROR EXIT SQL.SQLCODE;

-- Create dedicated user/schema
CREATE USER insurance_admin IDENTIFIED BY StrongPassword123;
GRANT CONNECT, RESOURCE TO insurance_admin;
ALTER USER insurance_admin DEFAULT TABLESPACE users QUOTA UNLIMITED ON users;

-- Switch to insurance_admin schema
ALTER SESSION SET CURRENT_SCHEMA = insurance_admin;

-- 1. INSURANCE_PRODUCTS
CREATE TABLE INSURANCE_PRODUCTS (
    product_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(100) NOT NULL,
    base_premium NUMBER(10,2) NOT NULL,
    risk_factor_logic VARCHAR2(50) NOT NULL,
    CONSTRAINT chk_risk_logic CHECK (risk_factor_logic IN ('AGE_BASED', 'FLAT_RATE'))
);

-- 2. CUSTOMERS
CREATE TABLE CUSTOMERS (
    customer_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    email VARCHAR2(100) NOT NULL,
    customer_name VARCHAR2(100) NOT NULL,
    date_of_birth DATE NOT NULL,
    CONSTRAINT uq_customers_email UNIQUE (email)
);

-- 3. POLICIES
CREATE TABLE POLICIES (
    policy_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    policy_number VARCHAR2(30) NOT NULL UNIQUE,
    product_id NUMBER NOT NULL,
    customer_id NUMBER NOT NULL,
    coverage_amount NUMBER(15,2) NOT NULL,
    annual_premium NUMBER(15,2) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    creation_date DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES INSURANCE_PRODUCTS(product_id),
    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id)
);

-- Sequence for policy numbers
CREATE SEQUENCE policy_seq START WITH 1000 INCREMENT BY 1 NOCACHE;

-- Insert sample insurance products
INSERT INTO INSURANCE_PRODUCTS (product_name, base_premium, risk_factor_logic)
VALUES ('Basic Health Plan', 500.00, 'AGE_BASED');

INSERT INTO INSURANCE_PRODUCTS (product_name, base_premium, risk_factor_logic)
VALUES ('Travel Lite Plan', 300.00, 'FLAT_RATE');

-- Create package specification
CREATE OR REPLACE PACKAGE insurance_engine AS

  FUNCTION calculate_premium (
    p_product_id      IN NUMBER,
    p_date_of_birth   IN DATE,
    p_coverage_amount IN NUMBER
  ) RETURN NUMBER;

  PROCEDURE create_policy (
    p_product_id       IN NUMBER,
    p_customer_name    IN VARCHAR2,
    p_customer_dob     IN DATE,
    p_customer_email   IN VARCHAR2,
    p_coverage_amount  IN NUMBER,
    p_policy_number    OUT VARCHAR2
  );

END insurance_engine;
/

-- Create package body
CREATE OR REPLACE PACKAGE BODY insurance_engine AS

  e_invalid_product EXCEPTION;
  PRAGMA EXCEPTION_INIT(e_invalid_product, -20001);

  FUNCTION calculate_premium (
    p_product_id      IN NUMBER,
    p_date_of_birth   IN DATE,
    p_coverage_amount IN NUMBER
  ) RETURN NUMBER IS
    v_base_premium     NUMBER;
    v_risk_logic       VARCHAR2(50);
    v_age              NUMBER;
    v_age_multiplier   NUMBER := 1.0;
    v_coverage_mult    NUMBER;
    v_premium          NUMBER;
  BEGIN
    SELECT base_premium, risk_factor_logic
    INTO v_base_premium, v_risk_logic
    FROM insurance_products
    WHERE product_id = p_product_id;

    IF v_risk_logic = 'FLAT_RATE' THEN
      RETURN v_base_premium;
    END IF;

    v_age := FLOOR(MONTHS_BETWEEN(SYSDATE, p_date_of_birth) / 12);

    IF v_age BETWEEN 18 AND 25 THEN
      v_age_multiplier := 1.5;
    ELSIF v_age BETWEEN 26 AND 40 THEN
      v_age_multiplier := 1.0;
    ELSIF v_age BETWEEN 41 AND 65 THEN
      v_age_multiplier := 1.2;
    ELSE
      v_age_multiplier := 1.0;
    END IF;

    v_coverage_mult := p_coverage_amount / 100000;
    v_premium := v_base_premium * v_age_multiplier * v_coverage_mult;

    RETURN v_premium;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20001, 'Invalid product ID.');
  END calculate_premium;

  PROCEDURE create_policy (
    p_product_id       IN NUMBER,
    p_customer_name    IN VARCHAR2,
    p_customer_dob     IN DATE,
    p_customer_email   IN VARCHAR2,
    p_coverage_amount  IN NUMBER,
    p_policy_number    OUT VARCHAR2
  ) IS
    v_customer_id      NUMBER;
    v_annual_premium   NUMBER;
    v_next_seq         NUMBER;
  BEGIN
    BEGIN
      SELECT customer_id
      INTO v_customer_id
      FROM customers
      WHERE email = p_customer_email;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        INSERT INTO customers (customer_name, date_of_birth, email)
        VALUES (p_customer_name, p_customer_dob, p_customer_email)
        RETURNING customer_id INTO v_customer_id;
    END;

    v_annual_premium := calculate_premium(
      p_product_id,
      p_customer_dob,
      p_coverage_amount
    );

    SELECT policy_seq.NEXTVAL INTO v_next_seq FROM dual;
    p_policy_number := 'POL-' || TO_CHAR(SYSDATE, 'YYYY') || '-' || TO_CHAR(v_next_seq);

    INSERT INTO policies (
      policy_number,
      product_id,
      customer_id,
      coverage_amount,
      annual_premium,
      start_date,
      end_date,
      creation_date
    ) VALUES (
      p_policy_number,
      p_product_id,
      v_customer_id,
      p_coverage_amount,
      v_annual_premium,
      SYSDATE,
      SYSDATE + 365,
      SYSDATE
    );

  END create_policy;

END insurance_engine;
/

-- test package
SET SERVEROUTPUT ON;
DECLARE
  v_policy_number VARCHAR2(30);
BEGIN
    insurance_engine.create_policy(
    p_product_id      => 1,
    p_customer_name   => 'Firstname Lastname',
    p_customer_dob    => TO_DATE('1990-05-10', 'YYYY-MM-DD'),
    p_customer_email  => 'firstname.lastname@insurance.com',
    p_coverage_amount => 200000,
    p_policy_number   => v_policy_number
  );

  DBMS_OUTPUT.PUT_LINE('Created Policy Number: ' || v_policy_number);
END;
/
